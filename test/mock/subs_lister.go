// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/GenesisEducationKyiv/main-project-delveper/internal/subs"
	"sync"
)

// Ensure, that ListerMock does implement subs.Lister.
// If this is not the case, regenerate this file with moq.
var _ subs.Lister = &ListerMock{}

// ListerMock is a mock implementation of subs.Lister.
//
//	func TestSomethingThatUsesLister(t *testing.T) {
//
//		// make and configure a mocked subs.Lister
//		mockedLister := &ListerMock{
//			ListFunc: func(ctx context.Context, topic subs.CurrencyPair) ([]subs.Subscription, error) {
//				panic("mock out the List method")
//			},
//		}
//
//		// use mockedLister in code that requires subs.Lister
//		// and then make assertions.
//
//	}
type ListerMock struct {
	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, topic subs.CurrencyPair) ([]subs.Subscription, error)

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Topic is the topic argument value.
			Topic subs.CurrencyPair
		}
	}
	lockList sync.RWMutex
}

// List calls ListFunc.
func (mock *ListerMock) List(ctx context.Context, topic subs.CurrencyPair) ([]subs.Subscription, error) {
	if mock.ListFunc == nil {
		panic("ListerMock.ListFunc: method is nil but Lister.List was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Topic subs.CurrencyPair
	}{
		Ctx:   ctx,
		Topic: topic,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, topic)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//
//	len(mockedLister.ListCalls())
func (mock *ListerMock) ListCalls() []struct {
	Ctx   context.Context
	Topic subs.CurrencyPair
} {
	var calls []struct {
		Ctx   context.Context
		Topic subs.CurrencyPair
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
