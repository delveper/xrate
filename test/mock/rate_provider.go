// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/GenesisEducationKyiv/main-project-delveper/internal/rate"
	"sync"
)

// Ensure, that ExchangeRateProviderMock does implement rate.ExchangeRateProvider.
// If this is not the case, regenerate this file with moq.
var _ rate.ExchangeRateProvider = &ExchangeRateProviderMock{}

// ExchangeRateProviderMock is a mock implementation of rate.ExchangeRateProvider.
//
//	func TestSomethingThatUsesExchangeRateProvider(t *testing.T) {
//
//		// make and configure a mocked rate.ExchangeRateProvider
//		mockedExchangeRateProvider := &ExchangeRateProviderMock{
//			GetExchangeRateFunc: func(ctx context.Context, pair rate.CurrencyPair) (*rate.ExchangeRate, error) {
//				panic("mock out the GetExchangeRate method")
//			},
//			StringFunc: func() string {
//				panic("mock out the String method")
//			},
//		}
//
//		// use mockedExchangeRateProvider in code that requires rate.ExchangeRateProvider
//		// and then make assertions.
//
//	}
type ExchangeRateProviderMock struct {
	// GetExchangeRateFunc mocks the GetExchangeRate method.
	GetExchangeRateFunc func(ctx context.Context, pair rate.CurrencyPair) (*rate.ExchangeRate, error)

	// StringFunc mocks the String method.
	StringFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// GetExchangeRate holds details about calls to the GetExchangeRate method.
		GetExchangeRate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Pair is the pair argument value.
			Pair rate.CurrencyPair
		}
		// String holds details about calls to the String method.
		String []struct {
		}
	}
	lockGetExchangeRate sync.RWMutex
	lockString          sync.RWMutex
}

// GetExchangeRate calls GetExchangeRateFunc.
func (mock *ExchangeRateProviderMock) GetExchangeRate(ctx context.Context, pair rate.CurrencyPair) (*rate.ExchangeRate, error) {
	if mock.GetExchangeRateFunc == nil {
		panic("ExchangeRateProviderMock.GetExchangeRateFunc: method is nil but ExchangeRateProvider.GetExchangeRate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Pair rate.CurrencyPair
	}{
		Ctx:  ctx,
		Pair: pair,
	}
	mock.lockGetExchangeRate.Lock()
	mock.calls.GetExchangeRate = append(mock.calls.GetExchangeRate, callInfo)
	mock.lockGetExchangeRate.Unlock()
	return mock.GetExchangeRateFunc(ctx, pair)
}

// GetExchangeRateCalls gets all the calls that were made to GetExchangeRate.
// Check the length with:
//
//	len(mockedExchangeRateProvider.GetExchangeRateCalls())
func (mock *ExchangeRateProviderMock) GetExchangeRateCalls() []struct {
	Ctx  context.Context
	Pair rate.CurrencyPair
} {
	var calls []struct {
		Ctx  context.Context
		Pair rate.CurrencyPair
	}
	mock.lockGetExchangeRate.RLock()
	calls = mock.calls.GetExchangeRate
	mock.lockGetExchangeRate.RUnlock()
	return calls
}

// String calls StringFunc.
func (mock *ExchangeRateProviderMock) String() string {
	if mock.StringFunc == nil {
		panic("ExchangeRateProviderMock.StringFunc: method is nil but ExchangeRateProvider.String was just called")
	}
	callInfo := struct {
	}{}
	mock.lockString.Lock()
	mock.calls.String = append(mock.calls.String, callInfo)
	mock.lockString.Unlock()
	return mock.StringFunc()
}

// StringCalls gets all the calls that were made to String.
// Check the length with:
//
//	len(mockedExchangeRateProvider.StringCalls())
func (mock *ExchangeRateProviderMock) StringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockString.RLock()
	calls = mock.calls.String
	mock.lockString.RUnlock()
	return calls
}
