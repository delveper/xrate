// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/GenesisEducationKyiv/main-project-delveper/internal/rate"
	"sync"
)

// Ensure, that CurrencyPairEventMock does implement rate.CurrencyPairEvent.
// If this is not the case, regenerate this file with moq.
var _ rate.CurrencyPairEvent = &CurrencyPairEventMock{}

// CurrencyPairEventMock is a mock implementation of rate.CurrencyPairEvent.
//
//	func TestSomethingThatUsesCurrencyPairEvent(t *testing.T) {
//
//		// make and configure a mocked rate.CurrencyPairEvent
//		mockedCurrencyPairEvent := &CurrencyPairEventMock{
//			BaseCurrencyFunc: func() string {
//				panic("mock out the BaseCurrency method")
//			},
//			QuoteCurrencyFunc: func() string {
//				panic("mock out the QuoteCurrency method")
//			},
//		}
//
//		// use mockedCurrencyPairEvent in code that requires rate.CurrencyPairEvent
//		// and then make assertions.
//
//	}
type CurrencyPairEventMock struct {
	// BaseCurrencyFunc mocks the BaseCurrency method.
	BaseCurrencyFunc func() string

	// QuoteCurrencyFunc mocks the QuoteCurrency method.
	QuoteCurrencyFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// BaseCurrency holds details about calls to the BaseCurrency method.
		BaseCurrency []struct {
		}
		// QuoteCurrency holds details about calls to the QuoteCurrency method.
		QuoteCurrency []struct {
		}
	}
	lockBaseCurrency  sync.RWMutex
	lockQuoteCurrency sync.RWMutex
}

// BaseCurrency calls BaseCurrencyFunc.
func (mock *CurrencyPairEventMock) BaseCurrency() string {
	if mock.BaseCurrencyFunc == nil {
		panic("CurrencyPairEventMock.BaseCurrencyFunc: method is nil but CurrencyPairEvent.BaseCurrency was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBaseCurrency.Lock()
	mock.calls.BaseCurrency = append(mock.calls.BaseCurrency, callInfo)
	mock.lockBaseCurrency.Unlock()
	return mock.BaseCurrencyFunc()
}

// BaseCurrencyCalls gets all the calls that were made to BaseCurrency.
// Check the length with:
//
//	len(mockedCurrencyPairEvent.BaseCurrencyCalls())
func (mock *CurrencyPairEventMock) BaseCurrencyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBaseCurrency.RLock()
	calls = mock.calls.BaseCurrency
	mock.lockBaseCurrency.RUnlock()
	return calls
}

// QuoteCurrency calls QuoteCurrencyFunc.
func (mock *CurrencyPairEventMock) QuoteCurrency() string {
	if mock.QuoteCurrencyFunc == nil {
		panic("CurrencyPairEventMock.QuoteCurrencyFunc: method is nil but CurrencyPairEvent.QuoteCurrency was just called")
	}
	callInfo := struct {
	}{}
	mock.lockQuoteCurrency.Lock()
	mock.calls.QuoteCurrency = append(mock.calls.QuoteCurrency, callInfo)
	mock.lockQuoteCurrency.Unlock()
	return mock.QuoteCurrencyFunc()
}

// QuoteCurrencyCalls gets all the calls that were made to QuoteCurrency.
// Check the length with:
//
//	len(mockedCurrencyPairEvent.QuoteCurrencyCalls())
func (mock *CurrencyPairEventMock) QuoteCurrencyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockQuoteCurrency.RLock()
	calls = mock.calls.QuoteCurrency
	mock.lockQuoteCurrency.RUnlock()
	return calls
}
