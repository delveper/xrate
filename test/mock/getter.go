// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/GenesisEducationKyiv/main-project-delveper/internal/rate"
	"sync"
)

// Ensure, that ExchangeRateServiceMock does implement rate.ExchangeRateService.
// If this is not the case, regenerate this file with moq.
var _ rate.ExchangeRateService = &ExchangeRateServiceMock{}

// ExchangeRateServiceMock is a mock implementation of rate.ExchangeRateService.
//
//	func TestSomethingThatUsesExchangeRateService(t *testing.T) {
//
//		// make and configure a mocked rate.ExchangeRateService
//		mockedExchangeRateService := &ExchangeRateServiceMock{
//			GetExchangeRateFunc: func(contextMoqParam context.Context, currencyPair rate.CurrencyPair) (*rate.ExchangeRate, error) {
//				panic("mock out the GetExchangeRate method")
//			},
//		}
//
//		// use mockedExchangeRateService in code that requires rate.ExchangeRateService
//		// and then make assertions.
//
//	}
type ExchangeRateServiceMock struct {
	// GetExchangeRateFunc mocks the GetExchangeRate method.
	GetExchangeRateFunc func(contextMoqParam context.Context, currencyPair rate.CurrencyPair) (*rate.ExchangeRate, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetExchangeRate holds details about calls to the GetExchangeRate method.
		GetExchangeRate []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// CurrencyPair is the currencyPair argument value.
			CurrencyPair rate.CurrencyPair
		}
	}
	lockGetExchangeRate sync.RWMutex
}

// GetExchangeRate calls GetExchangeRateFunc.
func (mock *ExchangeRateServiceMock) GetExchangeRate(contextMoqParam context.Context, currencyPair rate.CurrencyPair) (*rate.ExchangeRate, error) {
	if mock.GetExchangeRateFunc == nil {
		panic("ExchangeRateServiceMock.GetExchangeRateFunc: method is nil but ExchangeRateService.GetExchangeRate was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		CurrencyPair    rate.CurrencyPair
	}{
		ContextMoqParam: contextMoqParam,
		CurrencyPair:    currencyPair,
	}
	mock.lockGetExchangeRate.Lock()
	mock.calls.GetExchangeRate = append(mock.calls.GetExchangeRate, callInfo)
	mock.lockGetExchangeRate.Unlock()
	return mock.GetExchangeRateFunc(contextMoqParam, currencyPair)
}

// GetExchangeRateCalls gets all the calls that were made to GetExchangeRate.
// Check the length with:
//
//	len(mockedExchangeRateService.GetExchangeRateCalls())
func (mock *ExchangeRateServiceMock) GetExchangeRateCalls() []struct {
	ContextMoqParam context.Context
	CurrencyPair    rate.CurrencyPair
} {
	var calls []struct {
		ContextMoqParam context.Context
		CurrencyPair    rate.CurrencyPair
	}
	mock.lockGetExchangeRate.RLock()
	calls = mock.calls.GetExchangeRate
	mock.lockGetExchangeRate.RUnlock()
	return calls
}
